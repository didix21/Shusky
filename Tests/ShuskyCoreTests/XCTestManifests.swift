#if !canImport(ObjectiveC)
import XCTest

extension HookHandlerTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__HookHandlerTests = [
        ("testAddHook", testAddHook),
        ("testAddHookWithPackagePath", testAddHookWithPackagePath),
        ("testAppendHook", testAppendHook),
        ("testAppendHookWithPackagePath", testAppendHookWithPackagePath),
        ("testCreateHookFileIfNotExists", testCreateHookFileIfNotExists),
        ("testDontAppendHookIfAlreadyExist", testDontAppendHookIfAlreadyExist),
        ("testDontAppendHookWithPackagePathIfAlreadyExist", testDontAppendHookWithPackagePathIfAlreadyExist),
        ("testExecutionPermissions", testExecutionPermissions),
    ]
}

extension SHuskyParserTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SHuskyParserTests = [
        ("testEmptyYaml", testEmptyYaml),
        ("testHookContentIsEmpty", testHookContentIsEmpty),
        ("testHookParserNoHooksFound", testHookParserNoHooksFound),
        ("testHookParserShuskyConfigIsEmpty", testHookParserShuskyConfigIsEmpty),
        ("testHooksParser", testHooksParser),
        ("testHookTypeEnum", testHookTypeEnum),
        ("testInvalidTypeVerboseInHook", testInvalidTypeVerboseInHook),
        ("testNoHookFound", testNoHookFound),
        ("testParseComplexConfig", testParseComplexConfig),
        ("testParseSimpleConfig", testParseSimpleConfig),
    ]
}

extension ShuskyCoreTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ShuskyCoreTests = [
        ("testAddMultipleHooksIfTheyAreConfigured", testAddMultipleHooksIfTheyAreConfigured),
        ("testDefaultContentOfShuskyYMlAndPreCommitConfigured", testDefaultContentOfShuskyYMlAndPreCommitConfigured),
    ]
}

extension ShuskyFileTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ShuskyFileTests = [
        ("testCreateDefaultShuskyYamlFile", testCreateDefaultShuskyYamlFile),
        ("testCreateFile", testCreateFile),
        ("testDontCreateDefaultShuskyYamlFileIfNotEmpty", testDontCreateDefaultShuskyYamlFileIfNotEmpty),
        ("testReadShuskyYml", testReadShuskyYml),
        ("testShuskyFileName", testShuskyFileName),
        ("testShuskyFilePath", testShuskyFilePath),
    ]
}

extension ShuskyModelsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ShuskyModelsTests = [
        ("testHookIsEmpty", testHookIsEmpty),
        ("testHookNotFound", testHookNotFound),
        ("testInvalidCommand", testInvalidCommand),
        ("testInvalidCommandInHook", testInvalidCommandInHook),
        ("testInvalidRunInHook", testInvalidRunInHook),
        ("testInvalidTypeInHookVerboseKey", testInvalidTypeInHookVerboseKey),
        ("testRunCommand", testRunCommand),
        ("testRunCritical", testRunCritical),
        ("testRunInvalidCommand", testRunInvalidCommand),
        ("testRunInvalidDataInCommand", testRunInvalidDataInCommand),
        ("testRunInvalidDataInCritical", testRunInvalidDataInCritical),
        ("testRunInvalidDataInPath", testRunInvalidDataInPath),
        ("testRunInvalidDataInVerbose", testRunInvalidDataInVerbose),
        ("testRunPath", testRunPath),
        ("testRunVerbose", testRunVerbose),
        ("testRunWithCommandDefined", testRunWithCommandDefined),
        ("testRunWithCommandPathCriticalDefined", testRunWithCommandPathCriticalDefined),
        ("testRunWithCommandPathCriticalVerboseDefined", testRunWithCommandPathCriticalVerboseDefined),
        ("testRunWithInvalidTypeCommand", testRunWithInvalidTypeCommand),
        ("testValidHook", testValidHook),
    ]
}

public func __allTests() -> [XCTestCaseEntry] {
    return [
        testCase(HookHandlerTests.__allTests__HookHandlerTests),
        testCase(SHuskyParserTests.__allTests__SHuskyParserTests),
        testCase(ShuskyCoreTests.__allTests__ShuskyCoreTests),
        testCase(ShuskyFileTests.__allTests__ShuskyFileTests),
        testCase(ShuskyModelsTests.__allTests__ShuskyModelsTests),
    ]
}
#endif
